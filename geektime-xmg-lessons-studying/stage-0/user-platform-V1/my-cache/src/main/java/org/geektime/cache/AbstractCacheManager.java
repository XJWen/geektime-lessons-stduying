package org.geektime.cache;

import org.geektime.commons.io.Deserializers;
import org.geektime.commons.io.Serializers;

import javax.cache.Cache;
import javax.cache.CacheManager;
import javax.cache.spi.CachingProvider;
import java.net.URI;
import java.util.Map;
import java.util.Properties;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;
import java.util.function.Consumer;
import java.util.logging.Logger;

/**
 * Abstract {@link CacheManager} class, all instances of {@link CacheManager} that are generated by
 * {@link ConfigurableCachingProvider#getCacheManager(URI, ClassLoader, Properties)} must extend current class.
 *
 * @see ConfigurableCachingProvider
 * @since 1.0
 */
public abstract class AbstractCacheManager implements CacheManager {

    private static final Consumer<Cache> CLEAR_CACHE_OPERATION = Cache::clear;

    private static final Consumer<Cache> CLOSE_CACHE_OPERATION = Cache::close;

    private final Logger logger = Logger.getLogger(this.getClass().getName());

    private final  CachingProvider cachingProvider;

    private final  URI uri;

    private final ClassLoader classLoader;

    private final Serializers serializers;

    private final Deserializers deserializers;

    private final Properties properties;

    private volatile boolean closed;

    private ConcurrentMap<String, Map<KeyValueTypePair, Cache>> cacheRepository = new ConcurrentHashMap<>();

    public AbstractCacheManager(CachingProvider cachingProvider,URI uri,
                                ClassLoader classLoader,Properties properties){
        this.cachingProvider = cachingProvider;
        this.uri = uri==null ? cachingProvider.getDefaultURI() : uri;
        this.properties = properties==null ? cachingProvider.getDefaultProperties() : properties;
        this.classLoader = classLoader==null ? cachingProvider.getDefaultClassLoader() : classLoader;
        this.serializers = initSerializers(this.classLoader);
        this.deserializers = initDeserializers(this.classLoader);
    }

    private Serializers initSerializers(ClassLoader classLoader) {
        Serializers serializers = new Serializers(classLoader);
        serializers.loadSpi();
        return serializers;
    }

    private Deserializers initDeserializers(ClassLoader classLoader) {
        Deserializers deserializers = new Deserializers(classLoader);
        deserializers.loadSpi();
        return deserializers;
    }

    @Override
    public final CachingProvider getCachingProvider() {
        return cachingProvider;
    }

    @Override
    public final URI getURI() {
        return uri;
    }

    @Override
    public final ClassLoader getClassLoader() {
        return classLoader;
    }

    @Override
    public final Properties getProperties() {
        return properties;
    }
}
